<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 어노테이션으로 등록한 것들을 beans:bean에 등록하지 않아도 스프링에 등록하게 함 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 시작할 경로가 틀어지지 않게 절대경로로 매핑해준다 -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.bs.spring" />
	<!-- 시작할 패키지가 등록이 되어있어야한다. 해당 패키지 아래에 등록된 bean은 전부 찾는다. -->
	
	<!-- POJO 클래스를 Bean으로 등록하기
		<beans:bean>태그를 이용해서 등록한다.
		id 속성 : context 내에서 사용하는 bean의 이름(변수명)
		class 속성 : 대상이 되는 클래스를 지정한다.(패키지명부터 클래스명까지 기입한다.)
	 -->
	 <!-- Animal 클래스를 default 생성자로 생성해서 bean으로 등록한다. -->
	 <!-- <beans:bean id="bbo" class="com.bs.spring.beantest.Animal"/> -->
	 <!-- POJO 생성 시 setter를 이용해서 데이터를 넣어서 생성시키기  -->
	 <beans:bean id="bbo" class="com.bs.spring.beantest.Animal">
	 	<beans:property name="name" value="뽀송이"/>
	 	<beans:property name="age" value="3"/>
	 	<beans:property name="height" value="50.4"/>
	 </beans:bean>
</beans:beans>